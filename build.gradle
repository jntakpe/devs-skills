buildscript {
    ext {
        kotlinVersion = '1.1.3-2'
        springBootVersion = '2.0.0.M2'
        jacksonVersion = '2.8.8'
        reactorKotlinVersion = '1.0.0.M2'
        restAssuredVersion = '3.0.3'
        asciidoctorVersion = '1.5.3'
        ghPublishVersion = '0.2.1'
        osDetectorVersion = '1.4.0'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}")
        classpath("org.ajoberstar:gradle-git-publish:${ghPublishVersion}")
        classpath("com.google.gradle:osdetector-gradle-plugin:${osDetectorVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'com.google.osdetector'

group = 'com.github.jntakpe'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
    snippetsDir = file('build/generated-snippets')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.springframework.boot:spring-boot-starter-data-redis-reactive')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile("io.projectreactor:reactor-kotlin-extensions:${reactorKotlinVersion}")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    if (osdetector.os == 'linux') {
        compile group: 'io.netty', name: 'netty-transport-native-epoll', classifier: osdetector.classifier
    }
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
    testCompile("io.rest-assured:rest-assured:${restAssuredVersion}")
    testCompile('org.springframework.restdocs:spring-restdocs-restassured')
}

noArg {
    annotation("com.github.jntakpe.devsskills.config.NoArg")
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
    sources {
        include 'api-guide.adoc'
    }
}

asciidoctor.doLast {
    copy {
        from "${buildDir}/asciidoc/html5"
        into "${projectDir}/src/main/resources/static"
        include 'api-guide.html'
    }
}

gitPublish {
    repoUri = 'git@github.com:jntakpe/devs-skills.git'
    branch = 'gh-pages'
    repoDir = file("$buildDir/gitPublish")
    contents {
        from(file("${asciidoctor.outputDir}/html5"))
    }
    commitMessage = 'Publishing a new API guide'
}

task publish(type: GradleBuild) {
    dependsOn asciidoctor
    tasks = ['gitPublishPush']
}